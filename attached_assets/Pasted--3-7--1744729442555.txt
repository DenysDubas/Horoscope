Розробити вебсайт-гороскоп, який буде відображати прогноз для користувачів на 3 або 7 днів наперед. Прогноз включає оцінки по здоров'ю, стосункам та кар'єрі, які залежать від обраного знаку зодіаку. Дизайн та оформлення — на розсуд розробника, з акцентом на зручність користувача та естетичну привабливість.
________________________________________
Функціональні вимоги
1.	Вибір знаку зодіаку
o	Реалізувати селект-кнопку для вибору одного з 12 знаків зодіаку.
2.	Зміна формату відображення
o	Кнопка для перемикання між денним та вечірнім режимом відображення (темна/світла тема).
3.	Візуалізація знаку зодіаку
o	Відображати відповідну картинку або логотип для кожного знаку зодіаку.
4.	Перемикач на 3 чи 7 днів
o	Користувач може обирати, чи переглядати прогноз на 3 або 7 днів.
5.	Календар
o	Автоматично підлаштовується під поточну дату та відображає прогноз відповідно до вибраного періоду.
6.	Візуалізація оцінок
o	Використовувати окремі іконки або логотипи для здоров'я, стосунків і кар'єри.
7.	Генерація оцінок
o	Придумати формулу для генерації випадкових значень оцінок (x, y, z) в залежності від обраної дати і знаку зодіаку.
o	Оцінки повинні бути однаковими при повторному завантаженні сторінки.
8.	Відображення ключового показника
o	Відображати окрему іконку або логотип, що підкреслює найкращий або найгірший показник (наприклад, успіх у кар'єрі).
9.	API-інтеграція
o	Використовувати API catfact.ninja для отримання випадкового факту про котів.
o	Факт буде відображатися в залежності від середнього значення оцінок.
10.	Копіювання посилання
o	Кнопка для копіювання посилання в буфер обміну.
________________________________________
Технологічні вимоги
•	Фреймворк: Next.js (Буде плюсом використовувати разом з Typescript)
•	Стилізація: scss або css modules
•	API-запити: Fetch/Axios для отримання даних з API. (Буде плюсом: Налаштування Redux Toolkit та реалізування апі через RTKQuery.)
•	Збереження стану: Використання localStorage для фіксації оцінок
•	Іконки та графіка: Використання SVG або бібліотеки іконок (наприклад, Lucide, Heroicons)
________________________________________
Критерії оцінювання
•	Чистота коду: Використання сучасних практик, модульність, чистий та читабельний код.
•	Функціональність: Реалізація всіх запланованих функцій згідно з вимогами.
•	Дизайн та UX: Зручний інтерфейс, приємна візуалізація та адаптивність.
•	Продуктивність: Оптимізовані запити, швидкість завантаження, ефективне використання кешу.
________________________________________
Додаткові побажання
•	Адаптивність для мобільних пристроїв.
•	Анімації для покращення користувацького досвіду.
•	Легка інтеграція з майбутніми API.
________________________________________
Цей проект дозволить перевірити навички роботи з Next.js, управління станом, інтеграцію з API, стилізацію та побудову зручного інтерфейсу для користувачів.
